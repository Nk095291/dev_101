*variable declare without var is global
*hasOwnProperty() := return true if the object has the given property otherwise 						false
*Math.random() := genete random decimal no from 0 to 1 where 1 is exclusive
*The parseInt() function parses a string and returns an integer and if the string cannot be converted into the no then it returns NaN(not a number).

it take two parameter 1>str to be converted to the integer
					  2>radix(base).(2-36)
* latest version of ECMAscript (javascipt) ie ES6
introduce
	arrow function
	classes
	modules
	promises
	generators
	let and const
 *"use strict". This enables Strict Mode, which catches common coding mistakes and "unsafe" actions.	
 *javaScript provides a function Object.freeze to prevent data mutation.after
 		freezing the obj you can no longer add,remove or delete prop.trying to change the value will be ignore without any error.
 *high order function := function that take other function as parameter or return other functions

 ------------------------------------------------------------------------operator----------------------------------------------------------------------------------

*for variable no of arguments we can use "rest" operator i.e., "..."

*spread operator("..."), which allows us to expand arrays and other expressions in 				places where multiple parameters or elements are expected.

*destructuring assignment 
	for object-------------------------------------------------------------------------------------
		-const { x, y, z } = voxel; // x = 3.6, y = 7.4, z = 6.54
		-const { x : a, y : b, z : c } = voxel // a = 3.6, b = 7.4, c = 6.54
		-const { start : { x: startX, y: startY }} = a;
		-const profileUpdate = ({ name, age, nationality, location }) => {
									  /* do something with these fields */
								}
		------------------------------------------------------------------------------------------
	for array ------------------------------------------------------------------------------------
		-const [a, b] = [1, 2, 3, 4, 5, 6]
		-const [a, b,,, c] = [1, 2, 3, 4, 5, 6];
		-const [a, b, ...arr] = [1, 2, 3, 4, 5, 7]; // destructing operator with rest operator--
										--you cannot use the rest operator to catch a subarray that leaves out 	last element of the original array.
	----------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------constructor---------------------------------------------------------------------------
* this is a constructor:= 
function Bird() {
  this.name = "Albert";
  this.color = "blue";
  this.numLegs = 2;
}

*The prototype is a property that is shared among ALL instances of Bird. Here's how to add numLegs to the Bird prototype:

			Bird.prototype.numLegs = 2;(out side of the function)
*instanceof operator  = it tells as whether the given object is an instance of the object constructor or not 
						- ex :- obj instanceof obj_fun.
*constructor property = obj.constructor return the constructor funtion, we have to redefine it every times we assign prototype property using object.
*Bird.prototype = Object.create(Animal.prototype); now Bird constructor's instances will have all the properties of bird plus all properties of animal.

---------------------------------------------------------------------------------------------------------------------------------------------------------------

* for(let x in ar)
for an array x:==== 0,1,2,...ar.length
for an object x:== firstprop, secondprop, thirdprop

*String.prototype.replaceAt = function(index, character) {
    return this.substr(0, index) + character + this.substr(index+1);
};					// adding an prototype function for the String objects

*Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope (to the top of the current script or the current function).

---------------------------------------------------------------------------------------------------------------------------------------------------------------
ES6 features

const greeting = `Hello, my name is ${person.name}!  this is called literal ,with the help of this we can form complex string very easily *note "`" backticks is used 															here .${variable} syntax used above is a placeholder.
const getMousePosition = (x, y) => ({ x, y }); consice object declaration

const person = {
  name: "Taylor",
  sayHello() {					// consice function literal declaration
    return `Hello! My name is ${this.name}.`;
  }
};

=-=====================import a function/variable from another file ======================
import { function } from "file_path_goes_here"
// We can also import variables the same way!

=========================named export==================================
const capitalizeString = (string) => {
  return string.charAt(0).toUpperCase() + string.slice(1);
}
export { capitalizeString } //How to export functions.
export const foo = "bar"; //How to export variables.

--------------import all the file of a program
import * as object_with_name_of_your_choice from "file_path_goes_here"
object_with_name_of_your_choice.imported_function

==============================default export=============================
export default function add(x,y) {
  return x + y;
}
Note: Since export default is used to declare a fallback value for a module or file, you can only have one value be a default export in each module or file. Additionally, you cannot use export default with var, let, or const

import for default export 
		import add from "math_functions";			// here add is the name of the function we don't need {} as default export can export only one function from a file
		add(5,4); //Will return 9

---------------------------------------------regular expresision-------------------------------------------
A regular expression is an object that describes a pattern of characters.

Regular expressions are used to perform pattern-matching and "search-and-replace" functions on text.

====syntax = myregex=/pattern_to_search/modifier.

====methods = test() - return true and false depending upon whether regex is present in the string or not
= match() - this method is for string , it takes the regex and return the match string is present

->You can search for multiple patterns using the alternation or OR operator: "|".

=====modifier(we can use more than one modifiers together)
i = disable case sensitivity
g = to continue searching even after first match

=====wildcard 
.(dot / period)==same as _ in dbms 
	- ex =/hu./ this is regex can be use to search hut,hum,huh,huu
=You can search for a literal pattern with some flexibility with character classes. Character classes allow you to define a group of characters you wish to match by placing them inside square ([ and ]) brackets.
	ex - For example, you want to match "bag", "big", and "bug" but not "bog". You can create the regex /b[aiu]g/ to do this. The [aiu] is the character class that will only match the characters "a", "i", or "u".
	-Inside a character set, you can define a range of characters to match using a hyphen character: -.
	-To create a negated character set, you place a caret character (^) after the opening bracket and before the characters you do not want to match.
	-"+" to search(a,aa,aaa) have same meaning as in toc.
	-'*' to search(e,a,aa,aaa,aaaa) have same meaning as in toc.
	-greedy match =/t[a-z]*i/ return ["titani"]. if applied on tatanic ... it return longest possible part of the string 
	-lazy matching =/t[a-z]*?i/ returns ["ti"].... it return shortest possible part of the string
	- the caret(^) is also used to search at the begenning of the string . ex = /^yo/ it will try to search yo in the begenning of the string
	- similarly we can use dollar sign to search at the last - ex = /yo$/

	=-------------------
	shorthand character classes
	\w = [a-zA-Z0-9_];
	\W = [^a-zA-Z0-9_];
	\d =[0-9];
	\D = [^0-9];
---------------------objects-----------------------------------
Object.keys() = it returns the array of the obj's properties
--------------------------methods-----------------------------
***concat:-which is added to the end of the first array. It returns a new 					array and does not mutate either of the original arrays.
****Functional programming is all about creating and using non-mutating 					functions.
****The sort method sorts the elements of an array according to the callback 					function.
